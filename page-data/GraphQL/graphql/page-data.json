{"componentChunkName":"component---src-templates-blog-post-js","path":"/GraphQL/graphql/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Notes and some other stuff"}},"markdownRemark":{"id":"be4715ed-d826-5e1c-9a9f-eacdde431773","excerpt":"What is GraphQL? A layer between the front end client and backend data base.\nIf there are multiple data servers (eg: mongo, db2, sql), the client has to talk…","html":"<p><strong>What is GraphQL?</strong></p>\n<p>A layer between the front end client and backend data base.\nIf there are multiple data servers (eg: mongo, db2, sql), the client has to talk only to GraphQL.</p>\n<p>GraphQL clients are in control of the data they need. They will request for the data that they need (APIs return all the data where as graphQL\nreturn only necessary data, no overfetching)</p>\n<p>eg: query from the client requesting for particular fields:</p>\n<p>`{</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">employee(id: 42) {\n\n    firstName\n\n    lastName\n\n    email\n\n}</code></pre></div>\n<p>}`</p>\n<p>sample resposne (a JSON object)</p>\n<p>`{\n“employee”: {</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    &quot;firstName&quot;: &quot;Joe&quot;,\n\n    &quot;lastName: &quot;Mathew&quot;,\n\n    &quot;email&quot;:&quot;jmp@gmail.com&quot;\n\n}</code></pre></div>\n<p>}\n`</p>\n<p>As we can see, the answer matches the request query. Every field in the query, becomes a key in the answer object.</p>\n<p>GraphQL has to parts to it:</p>\n<ul>\n<li>Its a query language</li>\n<li>It a run time as well</li>\n</ul>\n<p>Query language </p>\n<p>Its all about the communication or the query language. Query (read operation) and Mutation (Write operation)</p>\n<p>Run time </p>\n<p>This is about validation of the queries, the type system, Introspection and Execution</p>\n<p>Clients can perform query / mutation operation using a medium like HTTP.</p>\n<p>A <strong>GraphQL document</strong> can contain one more more operations.</p>\n<p>GraphQL run time</p>\n<p>Reads and translates GraphQL documents to other data services and vice versa while handling the response.\nAlso, GraphQL run time defines a graph based schema to declare teh GraphQL API service capabilties to all clients. </p>\n<p><strong>GraphQL schema</strong>\nEvery field we define in a schema has a type. (scalar or non scalar)\nEvery field has a resolver function to read the logic.</p>\n<ul>\n<li>Client sends a GraphQL request</li>\n<li>The GraphQL server read the input from an interface</li>\n<li>Find the resolver function for each fields</li>\n<li>The response might be a field having another resolver function</li>\n<li>If so, process that resolver as well</li>\n<li>Consolidate the resposne and send to client</li>\n</ul>\n<p>GraphQL query language is very similar to JSON.</p>\n<p><strong>GraphQL Editor</strong></p>\n<p>There are many GraphQL demo sites available eg: GraphQLHub.com\nThere are many projects under GraphQLHub.com. Any of the projects under this\nif clicked will open in an (in browser) editor called GraphiQL (an editor from facebook).</p>\n<p><strong>GraphQL Language syntax</strong></p>\n<p><em>query operation</em>\nexample:\nquery QueryName {\ngraphQLHub\ngithub {\nuser(username: “deepaannjohn”) {\nlogin\nid\ncompany\navatar_url\nrepos {\nname\n}\n}\n}\n}</p>\n<p>tip: use ctrl+space to get prompts inside GraphiQL editor\ntype String! => this field is mandatory</p>\n<p><strong>GraphQL Query language</strong></p>\n<p><strong>Fields</strong></p>\n<p>Scalar fields</p>\n<p>They are simple fields (primitive / basic)\nexamples:\nGraphQLInt\nGraphQLFloat\nGraphQLString\nGraphQLBoolean\nGraphQLID - special type of id  which appears in all GraphQL responses</p>\n<p>Complex fields</p>\n<p>They usually have a custom type (eg: GutHubUser having name, companyname etc)</p>\n<p>Another example:\nGraphQLList</p>\n<p>GraphQL fields are modelled after functions. They accept argumets and return something in response.\nOn the server, we write JS functions to determine the value returned by every field.\nThese functions are called resolver functions.</p>\n<p>In the above github query example, th use field accepted username and used\nresolver function to determine the value to  be returned.</p>\n<p>Variables</p>\n<p>usage: to make query reusable</p>\n<p>example:</p>\n<p>query ($reponame: String!){\ngithub {\nrepo (name : $reponame, ownerUsername: “facebook”)  {\ncommits {\nmessage\ndate\n}\n}\n}\n}</p>\n<p>Directives</p>\n<p>Directives are used to alter the graphQL run time and they are used along with variables to achieve this.\nexamples of Built in directives are</p>\n<p>a. @skip\nb. @include</p>\n<p>Directive also support arguments, just like fields.</p>\n<p>eg: @skip, @include accepts a variable if (which is a boolean)</p>\n<p>Directives can be used with fields and fragments</p>\n<p>eg:\nquery test($includerepos: Boolean!) {\ngithub {\nuser (username: “deepaannjohn”) {\nlogin,\nrepos @include(if: $includerepos) {\nname\n}\n}\n}\n}</p>\n<p>Aliases</p>\n<p>eg:</p>\n<p>A UI componenet is expecting user.githubid as ‘id’ where as the JSON response object from\nGraphQL has ‘id’ in the response.</p>\n<p>We can rename as below:\nrequest:\nquery test {\ngithub {\nuser (username: “deepaannjohn”) {\nlogin,\ngithubid : id\n}\n}\n}\nresponse:\n{\n“data”: {\n“github”: {\n“user”: {\n“login”: “deepaannjohn”,\n“githubid”: 1234\n}\n}\n}\n}</p>\n<p>So UI component can use it as response.data.github.githubid.\nAgain, this gives clients more control.</p>\n<p>another use of alias:\nto retrieve the same field more than once\nquery test {\ngithub {\nuser1: user(username: “deepaannjohn”) {\nlogin\ngithubid: id\n}\nuser2: user(username: “mathewjpallan”) {\nlogin\nid\n}\n}\n}</p>\n<p>reponse:\n{\n“data”: {\n“github”: {\n“user1”: {\n“login”: “deepaannjohn”,\n“githubid”: 1234\n},\n“user2”: {\n“login”: “mathewjpallan”,\n“id”: 5678\n}\n}\n}\n}</p>\n<p>Fragments</p>\n<p>Fragments make GraphQL composable</p>\n<p>usage: to eliminate repeatition\neg:\nquery test {\ngithub {\nuser1: user(username: “deepaannjohn”) {\n…UserInfoFragment\n}\nuser2: user(username: “mathewjpallan”) {\n…UserInfoFragment\n}\n}\n}</p>\n<p>fragment UserInfoFragment on GithubUser {\nlogin,\nid\n}</p>\n<p>… => spread operator</p>\n<p>Mutations</p>\n<p>Writing into GraphQL</p>\n<p>eg:</p>\n<p>mutation m1($inputval: SetValueForKeyInput!) {\nkeyValue_setValue(input: $inputval) {\nitem {\nid\nvalue\n}\nclientMutationId\n}\n}</p>\n<p>{\n“inputval”: {\n“id”: “1”,\n“value”: “3635”,\n“clientMutationId”: “3”</p>\n<p>  }\n}</p>\n<p><strong>GraphQL Runtime</strong></p>\n<p>What we saw above was how to access GraphQL APIs.\nNow the next part is to build the GraphQL APIs / server.</p>\n<p>eg:\na hello-world graphql application:\nrequest:\n{\nhello\n}\nexpected response:\n{\n“data”:{\n“hello”:“world”\n}\n}</p>\n<p>We need to define the schema first.</p>\n<p>To do that we can use npm graphql pacakge.</p>\n<p>graphql npm package provides two important capabilities: building a type schema, and serving queries against that type schema.</p>\n<p>graphql-helloworld (without http server) is avaialble here:</p>\n<p><a href=\"https://github.com/deepaannjohn/graphql-helloworld\">https://github.com/deepaannjohn/graphql-helloworld</a></p>\n<p>graphql-http-endpoint (with http server endpoint) is available here:</p>\n<p><a href=\"https://github.com/deepaannjohn/graphql-http-endpoint\">https://github.com/deepaannjohn/graphql-http-endpoint</a></p>","frontmatter":{"title":"Getting started with GraphQL","date":"January 20, 2020","description":"Some basic inforamtion to get started with GraphQL"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/GraphQL/graphql/","previous":{"fields":{"slug":"/gatsby/gatsby/"},"frontmatter":{"title":"Getting started with GatsbyJS"}},"next":{"fields":{"slug":"/flutter/flutter/"},"frontmatter":{"title":"Getting started with mobile app devlopment using Flutter"}}}}}