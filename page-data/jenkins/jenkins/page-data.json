{"componentChunkName":"component---src-templates-blog-post-js","path":"/jenkins/jenkins/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Notes and some other stuff"}},"markdownRemark":{"id":"8ac60e5f-d13b-5ef5-bccb-946e88f9250a","excerpt":"Why Jenkins? Automate the deployment Conitunous Integration (eg: build the PRs and validate) Continuos Deployment Cruise Control (2001) - build, unit test etc…","html":"<p>Why Jenkins?</p>\n<ul>\n<li>Automate the deployment</li>\n<li>Conitunous Integration (eg: build the PRs and validate)</li>\n<li>Continuos Deployment</li>\n</ul>\n<p>Cruise Control (2001) - build, unit test etc , used XML config files\nHudson (released by Sun in 2005)\n2010 - Oracle acquires Sun and applies for Hudson Trademark\nJan 2011 - Project renamed to Jenkins by community because of issues with Oracle\nIn 2014 - Cloudbees started supporting enterprise Jenkins<br>\nApril 2016 - Jenkins 2 Released</p>\n<p>Jenkins Authentication:</p>\n<ol>\n<li>LDAP integration possible (Manage Jenkins-> Configure Global Security)</li>\n<li>Jenkins database</li>\n</ol>\n<p>Jenkins Authorization\nTwo popular options:</p>\n<ul>\n<li>Logged in user can do anything</li>\n<li>Fine grained project based control possible</li>\n</ul>\n<p><strong>Free style job</strong></p>\n<p>**Set up jenkins job for nodejs app **\nSample node js Project for Demo\n<a href=\"https://github.com/deepaannjohn/my-node-app\">https://github.com/deepaannjohn/my-node-app</a></p>\n<p>Create a new job / item in Jenkins\nSelect free style job option\nSelect source Code Managemnt -> Git -> repo url -> save</p>\n<p>Installing Node on Jenkins\nIf we want to be able to build and test our node application, we have to first install Node on Jenkins! To do this, navigate to Manage Jenkins -> Manage Plugins -> Search for NodeJS and install the plugin.\nNow navigate to Manage Jenkins -> Global Tool Configuration and look for the NodeJS heading. Install whatever version of NodeJS you require and click save:</p>\n<p>Set up Build Environment\nBuild -> Add Build step -> windows / shell script -> npm install\nsave</p>\n<p>Build Now</p>\n<p>Workspace in Jenkins:\nTo keep the files isolated for each job\nA space in jenkins to checkout code and do other operations.\nThe build files will be there</p>\n<p><strong>Using Pipelines in Jenkins</strong>\nIn V2, pipelines are used more as they are more flexible.\nCrete new Jenkins job (Pipeline job)\nHere, we use pipeline script which is written in groovy, Use pipeline syntax option helper\nUse the pipeline syntax option -> select bat / shell script -> genertae pipeline script -> copy script\nUse the pipeline syntax option -> select nodejs environment -> genertae pipeline script -> copy script</p>\n<p>note: pipeline syntax helper helps to genrate groovy scripts.</p>\n<p>“node”\nFrom pipeline syntax genrator / helper, click on ‘node’ step. The following is generated:\nnode {\n// some block\n}\nThis node is where the work will happenm workspace is created. Without node, the pipeline job wont run.</p>\n<p><strong>Node allocation -> Master-agent model:</strong>\nMaster node: The server where we run Jenkins\nMaster node has a pool of executors that can execute builds. When we click on ‘Build Now’, we need an executor to do the work.\nMaster node has ‘by default’ has two executors (configurable) and these executors do the actual work.\nSometimes, one master is not enough, then you can configure Agents (or slaves) which can run executor tasks. </p>\n<p>The node step allocates an agent an execuotor on one of the agents. </p>\n<p>Node step is required for pipeline jobd only. This is enabaled for flexibility so that multiple jobs can run in parallel. </p>\n<p>Example of a flexible pipeline workflow which makes use of ‘node’ step:\nnodejs app -\nnode 1 -  build, test the app and executor ends\nthen manual approval of deployment\nnode 2 - release the application\nThis will not hold any of the executors unnecessarily</p>\n<p><strong>Stages in pipeline:</strong>\nTotally optional but super useful.\nThis gives a quick overview of the execution, rather than checking the detailed console output, we can check the stages to follow along the execution.\nAgain use pipeline syntax for generating and understanding the details.\nThis gives a nice view of the pipeline / exection.</p>\n<p><strong>Visualizing Test Results</strong>\nPipeline Syntax helper-> ‘step: General build Step -> Publish JUnit test result report -> specify the location of the JUnit file</p>\n<p><strong>Plugins:</strong>\nFew useful plugins:\nCode Coverage (Cobertura) - Install, then generate syntax through pipeline helpee and add in Pipeline\nBlue Ocean - New UI, better experince for Pipelines</p>\n<p>Pipeline as code:\nJenkinsFile at the root of the repo\nPipeline  Script from SCM - </p>","frontmatter":{"title":"Jenkins 2 Fundamentals","date":"March 23, 2020","description":"Some basic inforamtion to get started with Jenkins 2"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/jenkins/jenkins/","previous":{"fields":{"slug":"/regex/"},"frontmatter":{"title":"Regex Fundamentals"}},"next":{"fields":{"slug":"/apache-flink/"},"frontmatter":{"title":"Getting started with Apache Flink"}}}}}