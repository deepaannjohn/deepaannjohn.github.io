{"componentChunkName":"component---src-templates-blog-post-js","path":"/cucumber/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Notes and some other stuff"}},"markdownRemark":{"id":"22a4dd5b-6e9c-554f-8d19-10204a1c70f1","excerpt":"What is BDD? Why do we do BDD?\nBusiness / Product Owner (specification / requirements) -> BA (Jira story)-> Developers (code) -> QA (test results)\nIn this…","html":"<p>What is BDD? Why do we do BDD?\nBusiness / Product Owner (specification / requirements) -> BA (Jira story)-> Developers (code) -> QA (test results)\nIn this process, the requirements can totally get misinterpreted.</p>\n<p>BDD gives concrete exmaples rather than abstract specifications.<br>\nA common language which all of the above personas can understand is used in BDD.</p>\n<p><em>Discovery phase / Illustrate phase</em>\nBDD specifies concrete examples of how a user would interact with the software / application.\nSo its clear to everyone involved.\nMain tools would be white boards and Post-its.\nThe output would be Acceptance criteria and Business rules.</p>\n<p><em>Formulate Phase</em>\nBA / tester would formulate these acceptance criteria / busines rules to a format of specifcations which\nboth a business person can understand and something that an automated process can also execute as part of the test suite.\nThis is where cucumber comes into play. We write these executable specifications in a special language called Gherkin (which\nuses the Given-When-Then notation)</p>\n<p><em>Automate Phase</em>\nWe use these Gherkin specifications into automated acceptance tests</p>\n<p>All these happens before development startes\nAnd to show case how the software works, we just have to exeucte the tests which is what the business can understand </p>\n<p>BDD - a single source of truth, both specification and automated acceptance tests. Also these become the functional documentations.</p>\n<p><strong>Gherkin</strong>\nGherkin is the ‘Given-When-Then’ notation.\nA business readbale notation for executable specifications.\nAs we can see from the example below, the language is ‘Business Readable’ and ‘Plain English’.\nAnd finally, this is an execuable piece of code as well!</p>\n<p>example:\nFeature: Guess the word</p>\n<h1>The first example has two steps</h1>\n<p>  Scenario: Maker starts a game\nWhen the Maker starts a game\nThen the Maker waits for a Breaker to join</p>\n<h1>The second example has three steps</h1>\n<p>  Scenario: Breaker joins a game\nGiven the Maker has started a game with the word “silky”\nWhen the Breaker joins the Maker’s game\nThen the Breaker must guess a word with 5 characters</p>\n<p><strong>Structure of Gherkin Language:</strong>\nWe start with Feature\nFeature is ilustrated with a nuber of ‘Scenarios’\nScenaris use ‘Given When Then’</p>\n<p><strong>Cucumber</strong>\nAutomation ibrary used to automate / run our executable specifications\nScenario: Some cukes\nGiven I have 48 cukes in my belly</p>\n<p>package com.example;\nimport io.cucumber.java.en.Given;</p>\n<p>public class StepDefinitions {\n@Given(“I have {int} cukes in my belly”)\npublic void i<em>have</em>n<em>cukes</em>in<em>my</em>belly(int cukes) {\nSystem.out.format(“Cukes: %n\\n”, cukes);\n}\n}</p>\n<p>Set up a Cucumber Test case:\n<em>To be added</em></p>","frontmatter":{"title":"BDD with Cucumber and Gherkin","date":"February 04, 2020","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/cucumber/","previous":{"fields":{"slug":"/node.js/"},"frontmatter":{"title":"node.js - a few notes"}},"next":{"fields":{"slug":"/regex/"},"frontmatter":{"title":"Regex Fundamentals"}}}}}