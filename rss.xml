<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Tech Notes and some other stuff]]></title><description><![CDATA[For my quick reference]]></description><link>https://gatsby-starter-blog-demo.netlify.com</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 19 Jan 2020 13:55:02 GMT</lastBuildDate><item><title><![CDATA[Getting started with GatsbyJS]]></title><description><![CDATA[GatsbyJS is a front end framework to build static websites and 
is based on JAMStack architecture. JAMStack architecture GatsbyJS is built…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/gatsby/gatsby/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/gatsby/gatsby/</guid><pubDate>Sun, 19 Jan 2020 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;GatsbyJS is a front end framework to build static websites and
is based on JAMStack architecture.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jamstack.org/&quot;&gt;JAMStack architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GatsbyJS is built on ReactJS, GraphQL, WebPack and JavaScript&lt;/p&gt;
&lt;p&gt;ReactJS (to build user interfaces)
GraphQL (Query language to get the data that you want in the format you specify)&lt;/p&gt;
&lt;p&gt;Static vs Dynamic Sites / Rendering
How Gatsby works? (Static rendering)
Using GraphQL API, blog data from mark down files are fetched and then Gatsby renders / genrates the final html (during build itself).
This same content (html file) is rendered for any user accessing the site.&lt;/p&gt;
&lt;p&gt;Dynamic / Server Side rendering example
Site fetches catalogue information of a company
API to fetch Data fetches data from Database
Pages dynamically genrated / rendered in server
Then passed to the client side&lt;/p&gt;
&lt;p&gt;To get started:
Install nodejs and gatsby-cli npm package globally to start developy gatsby based webistes
Use starter templates for a quick start. Starter templates are Boiler plater Gatsby sites.&lt;/p&gt;
&lt;p&gt;Select any one starter template
Then create a new gatsby site as below
gatsby new mysite &lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-default.git&quot;&gt;https://github.com/gatsbyjs/gatsby-starter-default.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To view the site, use the command ‘gatsby develop’
You can now view gatsby-starter-default in the browser.
&lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;
⠀
View GraphiQL, an in-browser IDE, to explore your site’s data and schema
&lt;a href=&quot;http://localhost:8000/___graphql&quot;&gt;http://localhost:8000/___graphql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gatsby Pages are react components (a reusable piece of Javascript that encapsulates related presentation and logic)&lt;/p&gt;
&lt;p&gt;File names and routing in Gatsby
src/pages in Gatsby is mapped to the route
Eg:
index.js    ----&gt;   /
about.js    ----&gt;    /about
contact.js    ----&gt;    /contact
hello.js    ----&gt;    /hello&lt;/p&gt;
&lt;p&gt;Static react component pages can be created under src/pages.
Links to these pages are provided in index.js file
Use Gatsby’s’Link’ function to link internal pages and HTML href for linking external pages&lt;/p&gt;
&lt;p&gt;Blogs can be written inside te blog folder as mark down files and Gatsby just publises them.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Upgrade nodejs from V8 to V12]]></title><description><![CDATA[In Windows OS Current version
v8.16.0 To upgrade to node 12:
Visit https://nodejs.org/en/ And download the installer for windows (LTS) and…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/upgrade-node-js/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/upgrade-node-js/</guid><pubDate>Fri, 17 Jan 2020 23:50:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;In Windows OS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Current version
v8.16.0&lt;/p&gt;
&lt;p&gt;To upgrade to node 12:
Visit &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And download the installer for windows (LTS) and install node.js using the installer&lt;/p&gt;
&lt;p&gt;Also upgrade npm using npm-windows-upgrade npm package
I upgraded to 6.12.1&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Set up a website using github pages and circleci]]></title><description><![CDATA[This blog is created using Gatsby and 
hosted in GitHub Pages. This blog is built and 
deployed using circleci. The source code is present…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/blog-setup/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/blog-setup/</guid><pubDate>Fri, 17 Jan 2020 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;This blog is created using &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; and
hosted in &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. This blog is built and
deployed using &lt;a href=&quot;https://circleci.com/&quot;&gt;circleci&lt;/a&gt;. The source code is present in
&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps to set up a blog like this:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Login to you GitHub account&lt;/p&gt;
&lt;p&gt;Create a repository, repository name should be username.github.io
In my case, it was deepaannjohn.github.io&lt;/p&gt;
&lt;p&gt;Clone the project and create an index.html file in the root folder.
Write ‘Hello World’ in index.html file.
Push the changes to master.
Fire up a browser and go to &lt;a href=&quot;https://username.github.io&quot;&gt;https://username.github.io&lt;/a&gt;
Your static web page has loaded and shows Hello World.&lt;/p&gt;
&lt;p&gt;GitHub Pages has hosted your html file for you. So whatever you have in this
repo will be hosted for you by GitHub. It will host / publish only from the master
branch.&lt;/p&gt;
&lt;p&gt;I used Gatsby to build my blog. Gatsby is a blazing fast modern site generator.
So, I have the Gatsby project in another branch of the same repo.&lt;/p&gt;
&lt;p&gt;So, now, create another branch ‘dev’.&lt;/p&gt;
&lt;p&gt;Create a Gatsby project in the dev branch. To do that,
Install gatsby-cli first.
Then generate the site using the command ‘gatsby new gatsby-site’
Then, ‘cd gatsby-site’
And ‘gatsby build’
More info here &lt;a href=&quot;https://www.gatsbyjs.org/docs/quick-start/&quot;&gt;gatsby quick start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will create a ‘public’ folder in the gatsby project’s root directory. This is the
static site which we need to host in github pages master branch. &lt;/p&gt;
&lt;p&gt;We will use circleci to build the Gatsby project for every commit to the ‘dev’
branch then deploy the contents of the public folder to the master branch. Once it’s
in master branch, GitHub pages will publish it for us.&lt;/p&gt;
&lt;p&gt;To set up circleci, login to circleci using your github account. The entire git repo is accessible
in circleci. Click on the option to ‘Set up’ the project. Select the right options (os and language).
circleci will generate a config.yml file for us. This config.yml file should be present in the root
folder of the gatsby project in ‘dev’ branch. &lt;/p&gt;
&lt;p&gt;In the gatsby project (dev branch), create a folder, .circleci and paste this ocnfig.yml file over there.
This file is only a template and it should be edited so that eveytime you commit to the dev branch,
circleci with use this config.yml file to build and deploy your project.&lt;/p&gt;
&lt;p&gt;My config.yml file is available in the dev branch once you clone it.
&lt;a href=&quot;https://github.com/deepaannjohn/deepaannjohn.github.io&quot;&gt;https://github.com/deepaannjohn/deepaannjohn.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now circleci, automatically creates an ssh key when you set up the project. But this will not have access to
commit to the master. So I generated a user key from the settings of my project in circleci, which gives
commit access to master branch of my project.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Integrating with IBM RTC from NodeJS]]></title><description><![CDATA[IBM EWM (formerly IBM RTC) is a change and configuration management tool from IBM. It provides capabilities like 
issue tracking or work…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/rtc/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/rtc/</guid><pubDate>Fri, 17 Jan 2020 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;IBM EWM (formerly IBM RTC) is a change and configuration management tool from IBM. It provides capabilities like
issue tracking or work item management (like Jira for example), source code management (like GitHub), Build capabilities, planning capacility etc.&lt;/p&gt;
&lt;p&gt;How do you pull some data out of RTC?&lt;/p&gt;
&lt;p&gt;IBM provides different mechanisms to do that. Lets examine all the possibile alternatives and different use cases.&lt;/p&gt;
&lt;p&gt;OSLC REST API
Reportable Rest API
Source Control Management Command Line
Plain Java API&lt;/p&gt;
&lt;p&gt;The technology stack we are cosiderning here is non Java or ro be precise node.js
For a Java environment, plain java PAI &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Linux quick start]]></title><description><![CDATA[Linux File System
All files and diectories including OS directories and files in Linux are under the root directory (/)
ls / will list of…]]></description><link>https://gatsby-starter-blog-demo.netlify.com/linux/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com/linux/</guid><pubDate>Wed, 15 Jan 2020 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Linux File System&lt;/strong&gt;
All files and diectories including OS directories and files in Linux are under the root directory (/)
ls / will list of them&lt;/p&gt;
&lt;p&gt;Some of the common root level directories are
/bin
/sbin
/boot
/dev
/etc  - configuration files
/home - user files will be in the sub directories in this folder
/lib  - software library
/root - root user’s files
/usr  - additional binaries
/var  - logs, cache etc
/proc
/dev
/sys&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;few useful commands&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pwd or echo $PWD - command which displays the current (present) working directory&lt;/p&gt;
&lt;p&gt;env - displays all environment variables&lt;/p&gt;
&lt;p&gt;| - pipe redirects the output of the command to the next command
eg: env | less (less is a file reader which will display data page by page)&lt;/p&gt;
&lt;p&gt;history - displays last run 1500 commands
timedatectl - displays the current time zone used by machine&lt;/p&gt;
&lt;p&gt;ls -a or ls —all   =&gt; lists all files including hidden =&gt; . int he beginning of the file name means the file is hidden
ip add (ip is the command addr argument gets the ip address or you can use ip a)
ls -l (list all properties as well)
ls -l /filelocation
You can combine aregumets passsed to the command like ls -ltr&lt;/p&gt;
&lt;p&gt;Type cd from anywhere and you will be back to your home directory&lt;/p&gt;
&lt;p&gt;touch file1 file2 file3 - creates new files
rm *
removes all files in directory&lt;/p&gt;
&lt;p&gt;backslash - escapa character
touch this\ is\ my\ file =&gt; file ‘this is my file’ created&lt;/p&gt;
&lt;p&gt;mkdir folderame&lt;/p&gt;
&lt;p&gt;nano is a utility that can be sued to create and edit files on linux.
nano file1
ctrl+x  =&gt; y for save&lt;/p&gt;
&lt;p&gt;touch filename to create empty file&lt;/p&gt;
&lt;p&gt;copy file
cp file1 dirname
cp file* dirname
cp file? dirname  - questionmark for single character matching,  * for multiple character matching&lt;/p&gt;
&lt;p&gt;mv - move&lt;/p&gt;
&lt;p&gt;. or ./ current dir
.. or ../ previous dir&lt;/p&gt;
&lt;p&gt;rmdir to remove diretcory - directory shud be empty&lt;/p&gt;
&lt;p&gt;Search the files
locate command
locate ‘string’  (run sudo updatedb to get recent files also)&lt;/p&gt;
&lt;p&gt;less filename -&gt; prints one page at a time
head filename -&gt; prints only first 10 lines
tail filename -&gt; prints last 10 lines&lt;/p&gt;
&lt;p&gt;pipe
cat filename | grep string &gt;&gt; newfilename&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;append
replace&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;wc - wordcount &lt;/p&gt;
&lt;p&gt;standard stream
standardin - stdin - 0
stdout - 1
stderr -2&lt;/p&gt;
&lt;p&gt;redirection from stdin / stdout
mysql -u root -p &amp;#x3C;password.txt
echo Hello &gt; newfile&lt;/p&gt;
&lt;p&gt;man &lt;command&gt; - to get help use manualpages
or wget —help
info - to get the info for all installed utilities&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;package managers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;debian based (ubuntu, mint and kali) - apt (online)/dpkg(local)
rhel/fedora/centos - yum or dnf(online) / rpm (local) - dnf will eventually replace yum&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;desktops&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;cinnamon / mate
kde
gnome (ubuntu uses it)
user can install and easily switch between any of these desktops&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Are you on windows? Want to quickly try these?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pull an ubuntu image and run it
docker run -it ubuntu bash (prefix winpty if you are using Git Bash on windows)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shells&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;myval=5 (no space in between. This will assign 5 to myval in that bash shell)
export myval=5 will set the value for all child shells also&lt;/p&gt;
&lt;p&gt;When a new terminal is opened, a new shell is formed using a hidden file in home/user directory called .bashrc
If you want to change any shell values (eg: colour of the shell), this is one of the files to edit.
.bashrc file is applied to only non login shell.
Login shell is the shell you are in use ssh login to login. This uses .profile file and some other files.
.profile uses.bashrc values as well/. .profile is also in the same location as .bashrc
There is a profile file in /etc also&lt;/p&gt;
&lt;p&gt;There are other shells also like ksh, sh
To find out the default shell, check the passwd file in /etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;working with archives&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Linux -&gt; tar is the archival mechanism (like zip in windows)
most files are .tar.gz
.tar tar archive
.gz tells its compressed  using gzip algorithm&lt;/p&gt;
&lt;p&gt;To unpack
tar xzf &lt;filename&gt;
x = xtract
z = zipped
f - filename is following &lt;/p&gt;
&lt;p&gt;To create new archive
tar czf newarchive.tar.gz foldernametocompress
c  create&lt;/p&gt;
&lt;p&gt;2 steps archive si as follows:
tar cf
and then
gzip tar file&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Install iproute2 package if ip command not working
ip route show =&gt; another command to view the ip address
sample output:
default via 172.17.0.1 dev eth0
172.17.0.0/16 dev eth0 proto kernel scope link src 172.17.0.2&lt;/p&gt;
&lt;p&gt;172.17.0.2 is the ip address
if the above two not present, there is some networking issue&lt;/p&gt;
&lt;p&gt;ip addr -&gt; also displays ip address
sample output:
1: lo: &amp;#x3C;LOOPBACK,UP,LOWER&lt;em&gt;UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid&lt;/em&gt;lft forever preferred&lt;em&gt;lft forever
2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1
link/ipip 0.0.0.0 brd 0.0.0.0
3: ip6tnl0@NONE: &lt;NOARP&gt; mtu 1452 qdisc noop state DOWN group default qlen 1
link/tunnel6 :: brd ::
1086: eth0@if1087: &amp;#x3C;BROADCAST,MULTICAST,UP,LOWER&lt;/em&gt;UP&gt; mtu 1500 qdisc noqueue state UP group default
link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
valid&lt;em&gt;lft forever preferred&lt;/em&gt;lft forever&lt;/p&gt;
&lt;p&gt;1 =&gt; local loopback
1086 =&gt; ip address&lt;/p&gt;
&lt;p&gt;ifconfig - another command similar to ip addr&lt;/p&gt;
&lt;p&gt;netstat -i
displays all network interfaces&lt;/p&gt;
&lt;p&gt;netstat -l lists all listening ports&lt;/p&gt;
&lt;p&gt;DNS
DNS (Domain Name Servers) map numeric ip addresses to human readabale addresses.
DSN servers maintain that mapping.&lt;/p&gt;
&lt;p&gt;To check if dns is reachable from your machine, use host command&lt;/p&gt;
&lt;p&gt;sample output of host command
host google.com
google.com has address 172.217.12.142
google.com has IPv6 address 2607:f8b0:4006:819::200e
google.com mail is handled by 50 alt4.aspmx.l.google.com.
google.com mail is handled by 10 aspmx.l.google.com.
google.com mail is handled by 20 alt1.aspmx.l.google.com.
google.com mail is handled by 30 alt2.aspmx.l.google.com.
google.com mail is handled by 40 alt3.aspmx.l.google.com.&lt;/p&gt;
&lt;p&gt;/etc/hosts - This file can be used to set up your own domain names locally. This will override DNS mappings
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.2      e838c710c3d6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remote connections and ssh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Openssh - provides capabilities for SSH as well as session security (session encryption)&lt;/p&gt;
&lt;p&gt;ssh command - ssh username@ipaddress
Ttype password when prompted to login&lt;/p&gt;
&lt;p&gt;Login using keypair to an amazon server / aws instance
ssh -i .home/mykey.pem username@ipaddress&lt;/p&gt;
&lt;p&gt;SCP - Secure Copy
Securely copies files between machines
scp localfilelocation username@ipaddress:remotefilelocation&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;linux scripting / bash scripting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Naming conventionf or scripting files is myfile.sh
.sh a convention to identify the scripting files and not a system requirement.&lt;/p&gt;
&lt;p&gt;First line of the script file is to tell linux that its a script file and which shell interpreter has to be used&lt;/p&gt;
&lt;h1&gt;!/bin/bash  - (actual location of the bash interpreter)&lt;/h1&gt;
&lt;p&gt;This line is called shebang (read as shbang)
few scripting commands:
declare -i number1 (integer is -i)
read number1  (wait for user input)
use $number1 to access the actual value&lt;/p&gt;
&lt;p&gt;chmod +x filename.sh  (to make it executable)&lt;/p&gt;
&lt;p&gt;how to run a script file
./filename.sh&lt;/p&gt;</content:encoded></item></channel></rss>